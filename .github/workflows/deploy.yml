name: Deploy FastAPI & Worker to EC2 via ECR 

on:
  push:
    branches: [main]
    paths:
      - "FastApi/**"
      - "Worker/**"
      - "Dockerfile.fastapi"
      - "Dockerfile.worker"
      - "docker-compose.fastapi.yml"
      - "docker-compose.worker.yml"
      - ".github/workflows/deploy.yml"

jobs:
  # ============================================
  # DETECT CHANGED FILES
  # ============================================
  detect-changes:
    name: 🕵️ Detect changed folders
    runs-on: ubuntu-latest
    outputs:
      fastapi_changed: ${{ steps.filter.outputs.fastapi }}
      worker_changed: ${{ steps.filter.outputs.worker }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect changes in repo
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            fastapi:
              - 'FastApi/**'
              - 'Dockerfile.fastapi'
              - 'docker-compose.fastapi.yml'
            worker:
              - 'Worker/**'
              - 'Dockerfile.worker'
              - 'docker-compose.worker.yml'

  # ============================================
  # BUILD FASTAPI IMAGE
  # ============================================
  build-fastapi:
    name: 🧱 Build FastAPI Image
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: ${{ needs.detect-changes.outputs.fastapi_changed == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push FastAPI image
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          IMAGE=${{ steps.login-ecr.outputs.registry }}/lexy/deudor/fastapi:$COMMIT_HASH
          echo "🚀 Building FastAPI image: $IMAGE"
          docker build -f Dockerfile.fastapi -t $IMAGE .
          docker push $IMAGE
          echo "image_fastapi=$IMAGE" >> $GITHUB_ENV

  # ============================================
  # BUILD WORKER IMAGE
  # ============================================
  build-worker:
    name: 🧱 Build Worker Image
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: ${{ needs.detect-changes.outputs.worker_changed == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Worker image
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          IMAGE=${{ steps.login-ecr.outputs.registry }}/lexy/deudor/worker:$COMMIT_HASH
          echo "🚀 Building Worker image: $IMAGE"
          docker build -f Dockerfile.worker -t $IMAGE .
          docker push $IMAGE
          echo "image_worker=$IMAGE" >> $GITHUB_ENV

  # ============================================
  # VERIFY BOTH BUILDS (only if both changed)
  # ============================================
  verify-builds:
    name: 🔍 Verify Both Builds Uploaded to ECR
    runs-on: ubuntu-latest
    needs: [build-fastapi, build-worker]
    if: |
      needs.build-fastapi.result == 'success' &&
      needs.build-worker.result == 'success'
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Verify both images exist in ECR
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "🔎 Checking FastAPI image..."
          aws ecr describe-images --repository-name lexy/deudor/fastapi --image-ids imageTag=$COMMIT_HASH
          echo "🔎 Checking Worker image..."
          aws ecr describe-images --repository-name lexy/deudor/worker --image-ids imageTag=$COMMIT_HASH
          echo "✅ Both images found in ECR. Proceeding to deploy."

  # ============================================
  # DEPLOY FASTAPI (solo si cambió o ambos cambiaron)
  # ============================================
  deploy-fastapi:
    name: 🚀 Deploy FastAPI to EC2
    runs-on: ubuntu-latest
    needs: [detect-changes, build-fastapi, build-worker, verify-builds]
    if: |
      needs.detect-changes.outputs.fastapi_changed == 'true' &&
      (needs.build-worker.result != 'success' || needs.detect-changes.outputs.worker_changed != 'true' || needs.verify-builds.result == 'success')
    steps:
      - name: Deploy FastAPI to Server A
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_A_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "====> Pulling latest repo..."
            cd /home/ec2-user/ecr-ec2.plantilla
            git pull
            docker compose -f docker-compose.fastapi.yml pull
            docker compose -f docker-compose.fastapi.yml up -d --no-deps
            echo "✅ FastAPI deployed successfully!"

  # ============================================
  # DEPLOY WORKER (solo si cambió o ambos cambiaron)
  # ============================================
  deploy-worker:
    name: 🚀 Deploy Worker to EC2
    runs-on: ubuntu-latest
    needs: [detect-changes, build-worker, build-fastapi, verify-builds]
    if: |
      needs.detect-changes.outputs.worker_changed == 'true' &&
      (needs.build-fastapi.result != 'success' || needs.detect-changes.outputs.fastapi_changed != 'true' || needs.verify-builds.result == 'success')
    steps:
      - name: Deploy Worker to Server B
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_B_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "====> Pulling latest repo..."
            cd /home/ec2-user/ecr-ec2.plantilla
            git pull
            docker compose -f docker-compose.worker.yml pull
            docker compose -f docker-compose.worker.yml up -d --no-deps
            echo "✅ Worker deployed successfully!"
