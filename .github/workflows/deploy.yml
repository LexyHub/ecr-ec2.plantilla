name: Deploy FastAPI & Worker to EC2 via ECR

on:
  push:
    branches: [main]
    paths:
      - "FastApi/**"
      - "Worker/**"
      - "Dockerfile.fastapi"
      - "Dockerfile.worker"
      - "docker-compose.fastapi.yml"
      - "docker-compose.worker.yml"
      - ".github/workflows/deploy.yml"

jobs:
  # ============================================
  # DETECTA CAMBIOS
  # ============================================
  detect-changes:
    name: üïµÔ∏è Detect changed folders
    runs-on: ubuntu-latest
    outputs:
      fastapi_changed: ${{ steps.filter.outputs.fastapi }}
      worker_changed: ${{ steps.filter.outputs.worker }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            fastapi:
              - 'FastApi/**'
              - 'Dockerfile.fastapi'
              - 'docker-compose.fastapi.yml'
            worker:
              - 'Worker/**'
              - 'Dockerfile.worker'
              - 'docker-compose.worker.yml'
      - run: |
          echo "üü£ FastAPI changed: ${{ steps.filter.outputs.fastapi }}"
          echo "üü¢ Worker changed:  ${{ steps.filter.outputs.worker }}"

  # ============================================
  # BUILD FASTAPI
  # ============================================
  build-fastapi:
    name: üß± Build FastAPI Image
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.fastapi_changed == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build & Push FastAPI image
        run: |
          
          IMAGE=${{ steps.login-ecr.outputs.registry }}/lexy/deudor/fastapi:latest
          docker build -f Dockerfile.fastapi -t $IMAGE .
          docker push $IMAGE
          echo "image_fastapi=$IMAGE" >> $GITHUB_ENV

  # ============================================
  # BUILD WORKER
  # ============================================
  build-worker:
    name: üß± Build Worker Image
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.worker_changed == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build & Push Worker image
        run: |
          
          IMAGE=${{ steps.login-ecr.outputs.registry }}/lexy/deudor/worker:latest
          docker build -f Dockerfile.worker -t $IMAGE .
          docker push $IMAGE
          echo "image_worker=$IMAGE" >> $GITHUB_ENV

  # ============================================
  # DEPLOY FASTAPI
  # ============================================
  deploy-fastapi:
    name: üöÄ Deploy FastAPI to EC2
    runs-on: ubuntu-latest
    needs: [detect-changes, build-fastapi]
    if: ${{ needs.detect-changes.outputs.fastapi_changed == 'true' }}
    steps:
      - name: Deploy FastAPI to Server A
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_A_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/ecr-ec2.plantilla
            git pull

            echo "====> Setting AWS credentials..."
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=us-east-1

            echo "====> Logging into ECR..."
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 125044483968.dkr.ecr.us-east-1.amazonaws.com

            echo "====> Pulling latest FastAPI image..."
            docker compose -f docker-compose.fastapi.yml pull
            docker compose -f docker-compose.fastapi.yml up -d --no-deps

            echo "‚úÖ FastAPI deployed successfully!"

  # ============================================
  # DEPLOY WORKER
  # ============================================
  deploy-worker:
    name: üöÄ Deploy Worker to EC2
    runs-on: ubuntu-latest
    needs: [detect-changes, build-worker]
    if: ${{ needs.detect-changes.outputs.worker_changed == 'true' }}
    steps:
      - name: Deploy Worker to Server B
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_B_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ec2-user/ecr-ec2.plantilla
            git pull

            echo "====> Setting AWS credentials..."
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=us-east-1

            echo "====> Logging into ECR..."
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 125044483968.dkr.ecr.us-east-1.amazonaws.com

            echo "====> Pulling latest Worker image..."
            docker compose -f docker-compose.worker.yml pull
            docker compose -f docker-compose.worker.yml up -d --no-deps

            echo "‚úÖ Worker deployed successfully!"

  # ============================================
  # DEPLOY AMBOS ‚Äî SOLO SI AMBAS BUILDS OK
  # ============================================
  deploy-both:
    name: ü§ù Deploy Both Together
    runs-on: ubuntu-latest
    needs: [build-fastapi, build-worker]
    if: |
      needs.build-fastapi.result == 'success' &&
      needs.build-worker.result == 'success'
    steps:
      - name: Deploy FastAPI & Worker together
        run: echo "‚úÖ Both images built successfully. Proceeding dual deploy (safe)."
